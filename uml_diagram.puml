@startuml battleship_class_diagram

skinparam classAttributeIconSize 0
'left to right direction
hide circle

class Game {
    - game_control :: GameControl
    - players :: (Player, Player) {field}
    - grids :: (Grid, Grid) {field}
    + __init__(player1, player2)
    + turn()
}

class GameCtrl {
    - player_ctrl :: PlayerCtrl
    - ship_ctrl :: ShipCtrl
    - game_history :: Game[]
    - game_view :: GameView
    + __init__()
    + new_game()
    + manage_players()
    + manage_ships()
    + player_ranking()
    + previous_games()
}

class GameView {
    + __init__()
    + new_game()
    + menu(text, options)
    + msg(text)
}

class Grid {
    - ships = Ships[]
    - shots :: str[]
    + __init__()
    + place_ships()
    + check_hit(coord)
    + check_defeat()
}

class Ship {
    - length :: int
    - orientation :: int
    - position :: (int, int) {field}
    - sunk :: bool
    - hits :: bool[]
    + __init__()
    + check_hit(coord)
    + check_sunk()
}

class ShipCtrl{
    - ships :: Ship[]
    + __init__()
    + add()
    + list()
    + modify()
    + remove()
}

class ShipView {
    + __init__()
}

class PlayerCtrl {
    - players :: Player[]
    - player_view :: PlayerView
    + add()
    + list()
    + modify()
    + remove()
}

abstract class Player {
    - name :: str
    - score :: int
    + __init__() {abstract}
    + name()
    + name(str)
    + score()
    + score(int)
    + play_move() {abstract}
    + place_ship() {abstract}
}

class PlayerView {
    + __init__()
}

class HumanPlayer {}
class ComputerPlayer {}

GameCtrl --> PlayerCtrl
Player <-- PlayerCtrl
PlayerCtrl <-- PlayerView

GameCtrl  --> ShipCtrl

Game --> Player

Player <|-- HumanPlayer
Player <|-- ComputerPlayer

GameCtrl <--> Game
GameCtrl --> GameView
Game --* Grid

ShipCtrl --> Ship
ShipCtrl --> ShipView
Grid --> Ship

@enduml