@startuml battleship_class_diagram

skinparam classAttributeIconSize 0
'left to right direction
hide circle

class Game {
    - game_ctrl :: GameCtrl
    - players :: (Player, Player) {field}
    - grids :: (Grid, Grid) {field}
    - height :: int
    - width :: int
    - move_list :: (int, str)[] {field}
    + __init__(game_ctrl, h, w,
            player1, player2, ships_copy)
    + game_ctrl()
    + players()
    + grids()
    + height()
    + width()
    + move_list()
    + turn(player)
    + log_move(player, coord)
}

class GameCtrl {
    - player_ctrl :: PlayerCtrl
    - ship_ctrl :: ShipCtrl
    - game_history :: Game[]
    - game_view :: GameView
    + __init__()
    + player_ctrl()
    + ship_ctrl()
    + game_history()
    + game_view()
    + new_game()
    + manage_players()
    + manage_ships()
    + player_ranking()
    + previous_games()
}

class GameView {
    + __init__()
    + new_game()
    + render_grid(matrix)
    + menu(text, options)
    + msg(text)
    + get_intput(validator)
}

class Grid {
    - ships :: Ships[]
    - matrix :: int[][]
    - fog_of_war :: bool[][]
    + __init__(h, w, ships_copy)
    + ships()
    + matrix()
    + fog_of_war()
    + place_ships()
    + check_hit(coord)
    + check_defeat()
}

class Ship {
    - name :: str
    - length :: int
    - orientation :: int
    - position :: (int, int) {field}
    - sunk :: bool
    - hits :: bool[]
    + __init__()
    + name()
    + name(new_name)
    + length()
    + length(new_length)
    + orientation()
    + orientation(new_orientation)
    + position()
    + position(new_position)
    + sunk()
    + sunk(is_sunk)
    + hits()
    + check_hit(coord)
    + check_sunk()
}

class ShipCtrl{
    - ships :: Ship[]
    + __init__()
    + ships()
    + add()
    + list()
    + modify()
    + remove()
}

class ShipView {
    + __init__()
    + menu(text, options)
    + msg(text)
    + get_intput(validator)
    
}

class PlayerCtrl {
    - players :: Player[]
    - player_view :: PlayerView
    + __init__()
    + players()
    + players_view()
    + add()
    + list()
    + modify()
    + remove()
}

abstract class Player {
    - name :: str
    - score :: int
    + __init__(name) {abstract}
    + name()
    + name(str)
    + score()
    + score(int)
    + play_move() {abstract}
    + place_ship() {abstract}
}

class PlayerView {
    + __init__()
    + menu(text, options)
    + msg(text)
    + get_intput(validator)
}

class HumanPlayer {
    + __init__()
    + play_move()
    + place_ship()
}
class ComputerPlayer {
    + __init__()
    + play_move()
    + place_ship()
}


GameCtrl "1" --> "1..*" Game : game_history <
GameCtrl "1" <-- "1..*" Game : game_ctrl >
GameCtrl "1" -r-> "1" GameView : game_view <

GameCtrl "1" -l-> "1" PlayerCtrl : player_ctrl <
GameCtrl "1" --> "1" ShipCtrl : ship_ctrl <

PlayerCtrl "1" --> "1..*" Player : players <
PlayerCtrl "1" --> "1" PlayerView : player_view <

Game "1" --> "2" Player : players <

Player <|-- HumanPlayer
Player <|-- ComputerPlayer

Game "1" *-- "2" Grid : grids <

ShipCtrl "1" --> "1..10" Ship : ships <
ShipCtrl "1" --> "1" ShipView : ship_view <
Grid "1" --> "1..10" Ship : ships <

@enduml