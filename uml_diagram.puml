@startuml battleship_class_diagram

skinparam classAttributeIconSize 0
'left to right direction
hide circle

class GameControl {
    - player_control :: PlayerControl
    - game_history :: Game[]
    - game_view :: GameView
    + __init__()
    + new_game()
    + manage_players()
}

class Game {
    - players :: Player[] 
    - grid_control :: GridControl
    + __init__(player1, player2)
    + set_size()
    + turn()
}

class GameView {
    + __init__()
}


class GridControl {
    - height :: int
    - width :: int
    - grids :: (Grid, Grid) {field}
    - grid_view :: GridView
    + __init__()
    + manage_ships()
    + start_placement()
}

class Grid {
    - ships_control :: ShipControl
    - shots :: str[]
    + __init__()
    + place_ship()
    + check_hit(coord)
    + check_defeat()
    + index(coord)
}

class GridView {
    + __init__()
}

class ShipControl{
    - ships :: Ship[]
    + __init__()
    + place_ship()
    + check_collision(coord)
}

class Ship {
    - shape :: bool[][]
    - orientation :: int
    - position :: (int, int) {field}
    - sunk :: bool
    - hits :: bool[][]
    + __init__()
    + check_hit(coord)
    + check_sunk()
}

class ShipView {
    + __init__()
}

class PlayerControl {
    - players :: Player[]
    - player_view :: PlayerView
    + add()
    + list()
    + modify()
    + remove()
}

abstract class Player {
    - name :: str
    - score :: int
    + __init__() {abstract}
    + name()
    + name(str)
    + score()
    + score(int)
    + play_move() {abstract}
    + place_ship() {abstract}
}

class PlayerView {
    + __init__()
}

class HumanPlayer {
    - player_control :: PlayerControl
}
class ComputerPlayer {}

PlayerControl <-u- GameControl
Player <-u-> PlayerControl
PlayerView <-u- PlayerControl

HumanPlayer -u-|> Player
ComputerPlayer -u-|> Player

GameControl -l-> Game
GameControl --> GameView
Game --> GridControl
GridControl --> Grid
GridControl --> GridView
Grid --> ShipControl
ShipControl --> Ship
ShipControl --> ShipView

@enduml