@startuml battleship_class_diagram

skinparam classAttributeIconSize 0
'left to right direction
hide circle

class Game {
    - game_ctrl: GameCtrl
    - players: tuple[Player, Player]
    - battlespaces: tuple[Battlespace, Battlespace]
    - scores: list[int]
    - height: int
    - width: int
    - move_list: list[tuple[int, str]]
    - start_time: datetime
    - end_time: datetime
    + __init__(game_ctrl, h, w,
            player1, player2, ships)
    + game_ctrl()
    + players()
    + battlespaces()
    + height()
    + width()
    + move_list()
    + scores()
    + start_time()
    + end_time()
    + main_loop(player_idx)
    + turn(player_idx)
    + log_move(player_idx, x, y)
    + idx2coord(x, y)
}

class GameCtrl {
    - player_ctrl: PlayerCtrl
    - ship_ctrl: ShipCtrl
    - game_view: GameView
    - game_history: list[Game]
    + __init__()
    + player_ctrl()
    + ship_ctrl()
    + game_view()
    + game_history()
    + start()
    + new_game()
    + player_ranking()
    + previous_games()
    + add_game(game)
}

class GameView {
    - text: str
    - options: dict[int, str]
    + __init__()
    + text()
    + options()
    + draw_ui_grid(layout, grid)
    + place_ship_menu(name, grid, ship_length)
    + turn_menu(name, grid)
    + turn_feedback_menu(name, grid)
    + game_description_menu(games_data)
}

class Battlespace {
    - ships: list[ships]
    - grid: list[list[str]]
    - fog_of_war: list[list[bool]]
    + __init__(h, w, ships)
    + ships()
    + grid()
    + fog_of_war()
    + check_hit(x, y)
    + check_defeat()
    + opponent_vision()
    + place_ship(ship, x, y, orientation)
}

class Ship {
    - type: ShipType
    - orientation: int
    - position: tuple[int, int]
    - sunk: bool
    - hits: list[bool]
    + __init__(length)
    + type()
    + length()
    + orientation()
    + orientation(orientation)
    + position()
    + position(position)
    + sunk()
    + hits()
    + check_hit(x, y)
    + check_sunk()
}

enum ShipType {
    BOAT = 1
    SUBMARINE = 2
    FRIGATE = 3
    CARRIER = 4
}

class ShipCtrl{
    - ships: list[Ship]
    - ship_view: ShipView
    + __init__()
    + ships()
    + ship_view()
    + start()
    + add_ship(length)
    + list()
    + remove_ship(idx)
}

class ShipView {
    - text: str
    - options: dict[int, str]
    + __init__()
    + text()
    + options()
}

class PlayerCtrl {
    - players: list[Player]
    - player_view: PlayerView
    - player_types = dict[int, function]
    + __init__()
    + players()
    + players_view()
    + player_types()
    + start()
    + add_player()
    + list()
    + modify_player()
    + remove_player()
}

abstract class AbstractPlayer {
    - name: str
    - score: int
    - date_of_birth: datetime
    + __init__(name, dob) {abstract}
    + name()
    + name(str)
    + score()
    + date_of_birth()
    + add_score(int)
    + play_move(grid, game_ctrl) {abstract}
    + place_ship(grid, game_ctrl) {abstract}
}

class PlayerView {
    - text: str
    - options: dict[int, str]
    + __init__()
    + text()
    + options()
    + input_dob()
}

class HumanPlayer {
    + __init__(name)
    + play_move(grid, game_ctrl)
    + place_ship(grid, game_ctrl)
    + coord2idx(coord)
}

class ComputerPlayer {
    + __init__(name)
    + play_move(grid, game_ctrl)
    + place_ship(game_ctrl)
}

GameCtrl "1" --> "1..*" Game : game_history <
GameCtrl "1" <-- "1..*" Game : game_ctrl >
GameCtrl "1" -r-> "1" GameView : game_view <

GameCtrl "1" -l-> "1" PlayerCtrl : player_ctrl <
GameCtrl "1" --> "1" ShipCtrl : ship_ctrl <

PlayerCtrl "1" --> "1..*" AbstractPlayer : players <
PlayerCtrl "1" --> "1" PlayerView : player_view <

Game "1" o-- "2" AbstractPlayer : players <

AbstractPlayer <|-- HumanPlayer
AbstractPlayer <|-- ComputerPlayer

Game "1" *-- "2" Battlespace : battlespaces <

ShipCtrl "1" --> "1..10" Ship : ships <
ShipCtrl "1" --> "1" ShipView : ship_view <
Battlespace "1" o-- "1..10" Ship : ships <

Ship *-r ShipType : type <
@enduml